#include "UserManager.h"
#include "QRPrinter.h"
#include <iostream>
#include "Wallet.h"
#include <string>
#include <limits>
#include <iomanip>
#include <cstdlib>

using namespace std;

void clearScreen() {
    #ifdef _WIN32
        system("cls");
    #else
        system("clear");
    #endif
}

void clearInputBuffer() {
    std::cin.clear();
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

int getMenuChoice(int min, int max) {
    int choice;
    while (true) {
        std::cout << "Chon chuc nang (" << min << "-" << max << "): ";
        if (std::cin >> choice) {
            if (choice >= min && choice <= max) {
                return choice;
            }
        }
        std::cout << "Lua chon khong hop le! Vui long nhap so tu " << min << " den " << max << ".\n";
        clearInputBuffer();
    }
}

void showMenu() {
    clearScreen();
    std::cout << "\n=== HE THONG QUAN LY VI DIEM THUONG ===\n";
    std::cout << "1. Dang ky tai khoan\n";
    std::cout << "2. Dang nhap\n";
    std::cout << "3. Doi mat khau\n";
    std::cout << "4. Thoat\n";
}

void registerUser(UserManager& userManager) {
    clearScreen();
    std::string username, password, fullName, email, phoneNumber;
    bool isPasswordAutoGenerated = false;
    
    std::cout << "\n=== DANG KY TAI KHOAN ===\n";
    
    std::cout << "Nhap ten dang nhap: ";
    std::cin >> username;
    
    std::cout << "Nhap mat khau (neu ban de trong thi he thong se tu sinh mat khau): ";
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    std::getline(std::cin, password);
    
    if (password.empty()) {
        password = userManager.generateRandomPassword();
        isPasswordAutoGenerated = true;
        std::cout << "\nMat khau tu sinh: " << password << "\n";
        std::cout << "Vui long luu lai mat khau nay va doi mat khau trong lan dang nhap dau tien.\n";
    }
    
    std::cout << "Nhap ho va ten: ";
    std::getline(std::cin, fullName);
    
    std::cout << "Nhap email (email phai co dang example@domain.com): ";
    std::cin >> email;
    
    std::cout << "Nhap so dien thoai (so dien thoai phai co 10 chu so): ";
    std::cin >> phoneNumber;
    
    auto result = userManager.registerUser(username, password, fullName, email, phoneNumber, isPasswordAutoGenerated);
    switch (result) {
        case RegisterResult::SUCCESS:
            std::cout << "Dang ky thanh cong!\n";
            break;
        case RegisterResult::USERNAME_EXISTS:
            std::cout << "Dang ky that bai! Ten dang nhap da ton tai.\n";
            break;
        case RegisterResult::INVALID_USERNAME:
            std::cout << "Dang ky that bai! Ten dang nhap khong hop le.\n";
            break;
        case RegisterResult::INVALID_PASSWORD:
            std::cout << "Dang ky that bai! Mat khau khong hop le.\n";
            break;
        case RegisterResult::INVALID_EMAIL:
            std::cout << "Dang ky that bai! Email khong hop le.\n";
            break;
        case RegisterResult::INVALID_PHONE:
            std::cout << "Dang ky that bai! So dien thoai khong hop le.\n";
            break;
        case RegisterResult::FILE_ERROR:
            std::cout << "Dang ky that bai! Khong the luu thong tin.\n";
            break;
    }
}

void showUserMenu() {
    clearScreen();
    std::cout << "\n=== MENU NGUOI DUNG ===\n";
    std::cout << "1. Xem thong tin ca nhan\n";
    std::cout << "2. Cap nhat thong tin ca nhan\n";
    std::cout << "3. Doi mat khau\n";
    std::cout << "4. Xem so du vi\n";
    std::cout << "5. Chuyen diem\n";
    std::cout << "6. Xem lich su giao dich\n";
    std::cout << "7. Dang xuat\n";
}

void displayUserInfo(const User& user) {
    clearScreen();
    std::cout << "\n=== THONG TIN CA NHAN ===\n";
    std::cout << "Ten dang nhap: " << user.getUsername() << "\n";
    std::cout << "Ho va ten: " << user.getFullName() << "\n";
    std::cout << "Email: " << user.getEmail() << "\n";
    std::cout << "So dien thoai: " << user.getPhoneNumber() << "\n";
}

void updateUserInfo(UserManager& userManager, const std::string& username) {
    clearScreen();
    std::cout << "\n=== CAP NHAT THONG TIN CA NHAN ===\n";
    
    // Get current user info
    auto it = userManager.getUser(username);
    if (!it) {
        std::cout << "Khong tim thay thong tin nguoi dung!\n";
        return;
    }
    
    std::string newFullName, newEmail, newPhoneNumber;
    bool isValidInput = false;
    
    std::cout << "Nhap ho va ten moi (de trong neu khong muon thay doi): ";
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    std::getline(std::cin, newFullName);
    if (newFullName.empty()) {
        newFullName = it->getFullName();
    }
    
    // Validate email
    do {
        std::cout << "Nhap email moi (de trong neu khong muon thay doi): ";
        std::getline(std::cin, newEmail);
        if (newEmail.empty()) {
            newEmail = it->getEmail();
            isValidInput = true;
        } else {
            if (!userManager.isValidEmail(newEmail)) {
                std::cout << "Email khong hop le! Email phai co dang example@domain.com\n";
            } else {
                isValidInput = true;
            }
        }
    } while (!isValidInput);
    
    // Validate phone number
    isValidInput = false;
    do {
        std::cout << "Nhap so dien thoai moi (de trong neu khong muon thay doi): ";
        std::getline(std::cin, newPhoneNumber);
        if (newPhoneNumber.empty()) {
            newPhoneNumber = it->getPhoneNumber();
            isValidInput = true;
        } else {
            if (!userManager.isValidPhoneNumber(newPhoneNumber)) {
                std::cout << "So dien thoai khong hop le! So dien thoai phai co 10 chu so\n";
            } else {
                isValidInput = true;
            }
        }
    } while (!isValidInput);
    
    // Generate OTP
    std::string otpCode = userManager.initiateUserInfoUpdate(username);
    if (otpCode.empty()) {
        std::cout << "Khong the tao ma OTP tam thoi. Vui long thu lai sau.\n";
        return;
    }
    
    // Display changes
    std::cout << "\nCac thay doi se duoc thuc hien:\n";
    if (newFullName != it->getFullName()) {
        std::cout << "- Ho va ten: " << it->getFullName() << " -> " << newFullName << "\n";
    }
    if (newEmail != it->getEmail()) {
        std::cout << "- Email: " << it->getEmail() << " -> " << newEmail << "\n";
    }
    if (newPhoneNumber != it->getPhoneNumber()) {
        std::cout << "- So dien thoai: " << it->getPhoneNumber() << " -> " << newPhoneNumber << "\n";
    }
    
    std::cout << "\nQuet ma QR de lay ma OTP:\n";
    userManager.printOTPQRCode(otpCode);
    std::cout << "\nMa OTP se het han sau 5 phut.\n";
    
    std::string otp;
    std::cout << "Nhap ma OTP: ";
    std::cin >> otp;
    
    if (userManager.updateUserInfoWithOTP(username, newFullName, newEmail, newPhoneNumber, otp)) {
        std::cout << "Cap nhat thong tin thanh cong!\n";
    } else {
        std::cout << "Cap nhat thong tin that bai! Vui long kiem tra lai thong tin.\n";
    }
}

void changePassword(UserManager& userManager, const std::string& username) {
    clearScreen();
    std::string oldPassword, newPassword;
    
    std::cout << "\n=== DOI MAT KHAU ===\n";
    
    std::cout << "Nhap mat khau cu: ";
    std::cin >> oldPassword;
    
    // Generate temporary OTP
    std::string otpCode = userManager.initiatePasswordChange(username);
    if (otpCode.empty()) {
        std::cout << "Khong the tao ma OTP tam thoi. Vui long thu lai sau.\n";
        return;
    }
    
    std::cout << "Quet ma QR de lay ma OTP:\n";
    userManager.printOTPQRCode(otpCode);
    std::cout << "\nMa OTP se het han sau 5 phut.\n";
    
    std::cout << "Nhap mat khau moi: ";
    std::cin >> newPassword;
    
    std::string otp;
    std::cout << "Nhap ma OTP: ";
    std::cin >> otp;
    
    if (userManager.changePasswordWithOTP(username, oldPassword, newPassword, otp)) {
        std::cout << "Doi mat khau thanh cong!\n";
    } else {
        std::cout << "Doi mat khau that bai! Vui long kiem tra lai thong tin.\n";
    }
}

void showAdminMenu() {
    clearScreen();
    std::cout << "\n=== MENU QUAN TRI VIEN ===\n";
    std::cout << "1. Xem thong tin ca nhan\n";
    std::cout << "2. Cap nhat thong tin ca nhan\n";
    std::cout << "3. Doi mat khau\n";
    std::cout << "4. Xem danh sach nguoi dung\n";
    std::cout << "5. Tao tai khoan moi\n";
    std::cout << "6. Dieu chinh thong tin nguoi dung\n";
    std::cout << "7. Xem thong tin vi tong\n";
    std::cout << "8. Them diem vao vi tong\n";
    std::cout << "9. Chuyen diem tu vi tong\n";
    std::cout << "10. Xem so du vi\n";
    std::cout << "11. Chuyen diem\n";
    std::cout << "12. Xem lich su giao dich\n";
    std::cout << "13. Dang xuat\n";
}

void displayAllUsers(const std::vector<User>& users) {
    clearScreen();
    std::cout << "\n=== DANH SACH NGUOI DUNG ===\n";
    std::cout << std::left << std::setw(15) << "Ten dang nhap" 
              << std::setw(25) << "Ho va ten"
              << std::setw(25) << "Email"
              << std::setw(15) << "So dien thoai" << "\n";
    std::cout << std::string(80, '-') << "\n";
    
    for (const auto& user : users) {
        std::cout << std::left << std::setw(15) << user.getUsername()
                  << std::setw(25) << user.getFullName()
                  << std::setw(25) << user.getEmail()
                  << std::setw(15) << user.getPhoneNumber() << "\n";
    }
}

void createUserByAdmin(UserManager& userManager) {
    clearScreen();
    std::string username, password, fullName, email, phoneNumber;
    char isAdminChoice;
    bool isAdmin = false;
    
    std::cout << "\n=== TAO TAI KHOAN MOI ===\n";
    
    std::cout << "Nhap ten dang nhap: ";
    std::cin >> username;
    
    std::cout << "Nhap mat khau: ";
    std::cin >> password;
    
    std::cout << "Nhap ho va ten: ";
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    std::getline(std::cin, fullName);
    
    std::cout << "Nhap email (email phai co dang example@domain.com): ";
    std::cin >> email;
    
    std::cout << "Nhap so dien thoai (so dien thoai phai co 10 chu so): ";
    std::cin >> phoneNumber;
    
    // Đơn giản hóa logic: chỉ cần nhập 'y' để tạo admin, các ký tự khác đều là no
    std::cout << "Ban co muon tao tai khoan quan tri vien? (y/n): ";
    std::cin >> isAdminChoice;
    isAdmin = (std::tolower(isAdminChoice) == 'y');
    
    auto result = userManager.createUserByAdmin(username, password, fullName, email, phoneNumber, isAdmin);
    switch (result) {
        case RegisterResult::SUCCESS:
            std::cout << "Tao tai khoan " << (isAdmin ? "quan tri vien" : "nguoi dung") << " thanh cong!\n";
            break;
        case RegisterResult::USERNAME_EXISTS:
            std::cout << "Tao tai khoan that bai! Ten dang nhap da ton tai.\n";
            break;
        case RegisterResult::INVALID_USERNAME:
            std::cout << "Tao tai khoan that bai! Ten dang nhap khong hop le.\n";
            break;
        case RegisterResult::INVALID_PASSWORD:
            std::cout << "Tao tai khoan that bai! Mat khau khong hop le.\n";
            break;
        case RegisterResult::INVALID_EMAIL:
            std::cout << "Tao tai khoan that bai! Email khong hop le.\n";
            break;
        case RegisterResult::INVALID_PHONE:
            std::cout << "Tao tai khoan that bai! So dien thoai khong hop le.\n";
            break;
        case RegisterResult::FILE_ERROR:
            std::cout << "Tao tai khoan that bai! Khong the luu thong tin.\n";
            break;
    }
}

void adjustUserInfo(UserManager& userManager) {
    clearScreen();
    std::cout << "\n=== DIEU CHINH THONG TIN NGUOI DUNG ===\n";
    
    std::string targetUsername;
    std::cout << "Nhap ten dang nhap cua nguoi dung can dieu chinh: ";
    std::cin >> targetUsername;
    
    auto targetUser = userManager.getUser(targetUsername);
    if (!targetUser) {
        std::cout << "Khong tim thay nguoi dung!\n";
        return;
    }
    
    std::string newFullName, newEmail, newPhoneNumber;
    bool isValidInput = false;
    
    std::cout << "Nhap ho va ten moi (de trong neu khong muon thay doi): ";
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    std::getline(std::cin, newFullName);
    if (newFullName.empty()) {
        newFullName = targetUser->getFullName();
    }
    
    // Validate email
    do {
        std::cout << "Nhap email moi (de trong neu khong muon thay doi): ";
        std::getline(std::cin, newEmail);
        if (newEmail.empty()) {
            newEmail = targetUser->getEmail();
            isValidInput = true;
        } else {
            if (!userManager.isValidEmail(newEmail)) {
                std::cout << "Email khong hop le! Email phai co dang example@domain.com\n";
            } else {
                isValidInput = true;
            }
        }
    } while (!isValidInput);
    
    // Validate phone number
    isValidInput = false;
    do {
        std::cout << "Nhap so dien thoai moi (de trong neu khong muon thay doi): ";
        std::getline(std::cin, newPhoneNumber);
        if (newPhoneNumber.empty()) {
            newPhoneNumber = targetUser->getPhoneNumber();
            isValidInput = true;
        } else {
            if (!userManager.isValidPhoneNumber(newPhoneNumber)) {
                std::cout << "So dien thoai khong hop le! So dien thoai phai co 10 chu so\n";
            } else {
                isValidInput = true;
            }
        }
    } while (!isValidInput);
    
    // Generate OTP for user verification
    std::string otpCode = userManager.initiateUserInfoUpdate(targetUsername);
    if (otpCode.empty()) {
        std::cout << "Khong the tao ma OTP tam thoi. Vui long thu lai sau.\n";
        return;
    }
    
    // Display changes
    std::cout << "\nCac thay doi se duoc thuc hien:\n";
    if (newFullName != targetUser->getFullName()) {
        std::cout << "- Ho va ten: " << targetUser->getFullName() << " -> " << newFullName << "\n";
    }
    if (newEmail != targetUser->getEmail()) {
        std::cout << "- Email: " << targetUser->getEmail() << " -> " << newEmail << "\n";
    }
    if (newPhoneNumber != targetUser->getPhoneNumber()) {
        std::cout << "- So dien thoai: " << targetUser->getPhoneNumber() << " -> " << newPhoneNumber << "\n";
    }
    
    std::cout << "\nQuet ma QR de lay ma OTP:\n";
    userManager.printOTPQRCode(otpCode);
    std::cout << "\nMa OTP se het han sau 5 phut.\n";
    std::cout << "Vui long yeu cau nguoi dung nhap ma OTP de xac nhan thay doi.\n";
    
    std::string otp;
    std::cout << "Nhap ma OTP: ";
    std::cin >> otp;
    
    if (userManager.updateUserInfoWithOTP(targetUsername, newFullName, newEmail, newPhoneNumber, otp)) {
        std::cout << "Cap nhat thong tin thanh cong!\n";
    } else {
        std::cout << "Cap nhat thong tin that bai! Vui long kiem tra lai thong tin.\n";
    }
}

void displayWalletBalance(const User& user) {
    clearScreen();
    std::cout << "\n=== THONG TIN SO DU VI ===\n";
    std::cout << "Ten dang nhap: " << user.getUsername() << "\n";
    std::cout << "So du hien tai: " << user.getWallet().getBalance() << " diem\n";
}

void transferPoints(UserManager& userManager, const std::string& fromUsername) {
    clearScreen();
    std::cout << "\n=== CHUYEN DIEM ===\n";
    
    std::string toUsername;
    int amount;
    
    std::cout << "Nhap ten dang nhap nguoi nhan: ";
    std::cin >> toUsername;
    
    if (toUsername == fromUsername) {
        std::cout << "Khong the chuyen diem cho chinh minh!\n";
        return;
    }
    
    auto toUser = userManager.getUser(toUsername);
    if (!toUser) {
        std::cout << "Khong tim thay nguoi nhan!\n";
        return;
    }
    
    std::cout << "Nhap so diem muon chuyen: ";
    std::cin >> amount;
    
    if (amount <= 0) {
        std::cout << "So diem khong hop le!\n";
        return;
    }
    
    auto fromUser = userManager.getUser(fromUsername);
    if (fromUser->getWallet().getBalance() < amount) {
        std::cout << "So du khong du de thuc hien giao dich!\n";
        return;
    }
    
    // Generate OTP for transaction verification
    std::string otpCode = userManager.setupOTP(fromUsername);
    if (otpCode.empty()) {
        std::cout << "Khong the tao ma OTP tam thoi. Vui long thu lai sau.\n";
        return;
    }
    
    std::cout << "\nQuet ma QR de lay ma OTP:\n";
    userManager.printOTPQRCode(otpCode);
    std::cout << "\nMa OTP se het han sau 5 phut.\n";
    
    std::string otp;
    std::cout << "Nhap ma OTP: ";
    std::cin >> otp;
    
    // Tạo mã giao dịch duy nhất
    std::string transactionId = fromUsername + "_" + toUsername + "_" + std::to_string(std::time(nullptr));
    
    // Tạo giao dịch mới với trạng thái PENDING
    Transaction transaction(
        transactionId,
        fromUser->getWallet().getWalletId(),
        toUser->getWallet().getWalletId(),
        amount,
        std::time(nullptr),
        "PENDING"
    );
    
    // Xác thực OTP và thực hiện giao dịch
    if (userManager.verifyOTP(fromUsername, otp)) {
        // Cập nhật số dư
        if (fromUser->getWallet().deductPoints(amount)) {
            toUser->getWallet().addPoints(amount);
            
            // Cập nhật trạng thái giao dịch thành COMPLETED
            transaction.status = "COMPLETED";
            fromUser->getWallet().addTransaction(transaction);
            toUser->getWallet().addTransaction(transaction);
            
            std::cout << "Chuyen diem thanh cong!\n";
        } else {
            std::cout << "Chuyen diem that bai! Vui long kiem tra lai thong tin.\n";
        }
    } else {
        // Cập nhật trạng thái giao dịch thành FAILED
        transaction.status = "FAILED";
        fromUser->getWallet().addTransaction(transaction);
        toUser->getWallet().addTransaction(transaction);
        
        std::cout << "Chuyen diem that bai! Ma OTP khong hop le.\n";
    }
}

void displayTransactionHistory(const User& user) {
    clearScreen();
    std::cout << "\n=== LICH SU GIAO DICH ===\n";
    
    const auto& transactions = user.getWallet().getTransactionHistory();
    if (transactions.empty()) {
        std::cout << "Chua co giao dich nao.\n";
        return;
    }
    
    std::cout << std::left << std::setw(35) << "Thoi gian"
              << std::setw(15) << "Loai"
              << std::setw(15) << "So diem"
              << std::setw(20) << "Vi giao dich"
              << std::setw(15) << "Trang thai" << "\n";
    std::cout << std::string(120, '-') << "\n";
    
    for (const auto& trans : transactions) {
        std::string type = (trans.fromWalletId == user.getWallet().getWalletId()) ? "Gui" : "Nhan";
        std::string otherWallet = (trans.fromWalletId == user.getWallet().getWalletId()) ? trans.toWalletId : trans.fromWalletId;
        
        // Get timestamp string and remove newline
        std::string timestamp = std::ctime(&trans.timestamp);
        timestamp = timestamp.substr(0, timestamp.length() - 1); // Remove newline character
        
        std::cout << std::left << std::setw(35) << timestamp
                  << std::setw(15) << type
                  << std::setw(15) << trans.points
                  << std::setw(20) << otherWallet
                  << std::setw(15) << trans.status << "\n";
    }
}

void displayTotalWalletInfo(UserManager& userManager, const std::string& username) {
    clearScreen();
    std::cout << "\n=== THONG TIN VI TONG ===\n";
    
    auto user = userManager.getUser(username);
    if (!user) {
        std::cout << "Khong tim thay thong tin nguoi dung!\n";
        return;
    }
    
    if (userManager.viewTotalWalletInfo(*user)) {
        std::cout << "\nNhan Enter de tiep tuc...";
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        std::cin.get();
    } else {
        std::cout << "Ban khong co quyen truy cap thong tin vi tong!\n";
    }
}

void createNewPoints(UserManager& userManager, const std::string& username) {
    clearScreen();
    std::cout << "\n=== THEM DIEM VAO VI TONG ===\n";
    
    auto user = userManager.getUser(username);
    if (!user) {
        std::cout << "Khong tim thay thong tin nguoi dung!\n";
        return;
    }
    
    int amount;
    std::cout << "Nhap so diem muon them: ";
    std::cin >> amount;
    
    if (amount <= 0) {
        std::cout << "So diem khong hop le!\n";
        return;
    }
    
    if (userManager.createNewPoints(amount, *user)) {
        std::cout << "Tao diem thanh cong!\n";
    } else {
        std::cout << "Tao diem that bai! Vui long kiem tra lai thong tin.\n";
    }
}

void transferPointsFromTotal(UserManager& userManager, const std::string& username) {
    clearScreen();
    std::cout << "\n=== CHUYEN DIEM TU VI TONG ===\n";
    
    auto admin = userManager.getUser(username);
    if (!admin || !admin->getIsAdmin()) {
        std::cout << "Ban khong co quyen thuc hien chuc nang nay!\n";
        return;
    }

    // Hiển thị số dư ví tổng
    std::cout << "So du vi tong: " << userManager.getTotalWalletBalance() << " diem\n\n";

    // Nhập thông tin người nhận
    std::string receiverUsername;
    std::cout << "Nhap ten nguoi nhan: ";
    std::cin >> receiverUsername;

    auto receiver = userManager.getUser(receiverUsername);
    if (!receiver) {
        std::cout << "Khong tim thay nguoi dung!\n";
        return;
    }

    // Nhập số điểm
    int points;
    std::cout << "Nhap so diem muon chuyen: ";
    std::cin >> points;

    if (points <= 0) {
        std::cout << "So diem khong hop le!\n";
        return;
    }

    if (points > userManager.getTotalWalletBalance()) {
        std::cout << "So du vi tong khong du!\n";
        return;
    }

    // Tạo mã giao dịch
    std::string transactionId = "SYSTEM_TOTAL_WALLET_001_" + std::to_string(std::time(nullptr));

    // Thực hiện chuyển điểm
    if (userManager.transferPointsFromTotal(transactionId, points, *receiver)) {
        std::cout << "Chuyen diem thanh cong!\n";
        std::cout << "So du vi tong con lai: " << userManager.getTotalWalletBalance() << " diem\n";
        std::cout << "So du vi nguoi nhan: " << receiver->getWallet().getBalance() << " diem\n";
    } else {
        std::cout << "Chuyen diem that bai!\n";
    }
}

void login(UserManager& userManager) {
    clearScreen();
    std::string username, password;
    
    std::cout << "\n=== DANG NHAP ===\n";
    
    std::cout << "Nhap ten dang nhap: ";
    std::cin >> username;
    
    std::cout << "Nhap mat khau: ";
    std::cin >> password;
    
    if (userManager.login(username, password)) {
        std::cout << "Dang nhap thanh cong!\n";
        
        // Check and request password change if it's an auto-generated password
        if (userManager.isPasswordAutoGenerated(username)) {
            std::cout << "\nDay la lan dau dang nhap voi mat khau tu sinh.\n";
            std::cout << "Vui long doi mat khau cua ban.\n";
            
            std::string newPassword;
            std::cout << "Nhap mat khau moi: ";
            std::cin >> newPassword;
            
            if (userManager.changePassword(username, password, newPassword)) {
                std::cout << "Doi mat khau thanh cong!\n";
            } else {
                std::cout << "Doi mat khau that bai! Vui long thu lai sau.\n";
            }
        }
        
        // Show appropriate menu based on user type
        while (true) {
            if (userManager.isAdmin(username)) {
                showAdminMenu();
                int choice = getMenuChoice(1, 13);
                
                switch (choice) {
                    case 1:
                        displayUserInfo(*userManager.getUser(username));
                        break;
                    case 2:
                        updateUserInfo(userManager, username);
                        break;
                    case 3:
                        changePassword(userManager, username);
                        break;
                    case 4:
                        displayAllUsers(userManager.getAllUsers());
                        break;
                    case 5:
                        createUserByAdmin(userManager);
                        break;
                    case 6:
                        adjustUserInfo(userManager);
                        break;
                    case 7:
                        displayTotalWalletInfo(userManager, username);
                        break;
                    case 8:
                        createNewPoints(userManager, username);
                        break;
                    case 9:
                        transferPointsFromTotal(userManager, username);
                        break;
                    case 10:
                        displayWalletBalance(*userManager.getUser(username));
                        break;
                    case 11:
                        transferPoints(userManager, username);
                        break;
                    case 12:
                        displayTransactionHistory(*userManager.getUser(username));
                        break;
                    case 13:
                        return;
                }
            } else {
                showUserMenu();
                int choice = getMenuChoice(1, 7);
                
                switch (choice) {
                    case 1:
                        displayUserInfo(*userManager.getUser(username));
                        break;
                    case 2:
                        updateUserInfo(userManager, username);
                        break;
                    case 3:
                        changePassword(userManager, username);
                        break;
                    case 4:
                        displayWalletBalance(*userManager.getUser(username));
                        break;
                    case 5:
                        transferPoints(userManager, username);
                        break;
                    case 6:
                        displayTransactionHistory(*userManager.getUser(username));
                        break;
                    case 7:
                        return;
                }
            }
            
            std::cout << "\nNhan Enter de tiep tuc...";
            clearInputBuffer();
            std::cin.get();
        }
    } else {
        std::cout << "Dang nhap that bai! Vui long kiem tra lai thong tin.\n";
    }
}

int main() {
    UserManager userManager("../data/users.txt");
    
    while (true) {
        showMenu();
        int choice = getMenuChoice(1, 4);
        
        switch (choice) {
            case 1:
                registerUser(userManager);
                break;
            case 2:
                login(userManager);
                break;
            case 3:
                std::cout << "Vui long dang nhap de doi mat khau.\n";
                break;
            case 4:
                clearScreen();
                std::cout << "Cam on ban da su dung chuong trinh!\n";
                return 0;
        }
        
        std::cout << "\nNhan Enter de tiep tuc...";
        clearInputBuffer();
        std::cin.get();
    }

    return 0;
}
