#ifndef USER_MANAGER_H
#define USER_MANAGER_H

#include <string>
#include <vector>
#include <map>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <regex>
#include "User.h"
#include "OTPManager.h"
#include "PasswordHasher.h"
#include "Wallet.h"

enum class RegisterResult {
    SUCCESS,
    USERNAME_EXISTS,
    INVALID_USERNAME,
    INVALID_PASSWORD,
    INVALID_EMAIL,
    INVALID_PHONE,
    FILE_ERROR
};

class UserManager {
private:
    std::map<std::string, User> users;
    std::string dataFile;
    Wallet totalWallet;
    OTPManager otpManager;
    bool isSystemInitialized;

    // File operations
    bool saveToFile(const std::string& filename) const;
    void loadFromFile(const std::string& filename);
    void initializeSystem();

public:
    static const std::string TOTAL_WALLET_ID;  // ID cố định cho ví tổng

    UserManager(const std::string& usersPath);
    
    // Getters
    const std::string& getDataFilePath() const { return dataFile; }
    
    // User management
    bool isUsernameExists(const std::string& username);
    RegisterResult registerUser(const std::string& username, const std::string& password,
                              const std::string& fullName, const std::string& email,
                              const std::string& phoneNumber, bool isPasswordAutoGenerated = false);
    bool login(const std::string& username, const std::string& password);
    std::string generateRandomPassword();
    void sendLoginInfoToUser(const std::string& email, const std::string& username,
                            const std::string& password);
    
    // OTP management
    std::string setupOTP(const std::string& username);
    bool verifyOTP(const std::string& username, const std::string& otp);
    std::string getCurrentOTP();
    void printOTPQRCode(const std::string& otp);
    
    // Password management
    bool isPasswordAutoGenerated(const std::string& username);
    bool changePassword(const std::string& username, const std::string& oldPassword,
                       const std::string& newPassword);
    std::string initiatePasswordChange(const std::string& username);
    bool changePasswordWithOTP(const std::string& username, const std::string& oldPassword,
                              const std::string& newPassword, const std::string& otp);
    
    // User info management
    std::string initiateUserInfoUpdate(const std::string& username);
    bool updateUserInfoWithOTP(const std::string& username, const std::string& newFullName,
                              const std::string& newEmail, const std::string& newPhoneNumber,
                              const std::string& otp);
    
    // Admin functions
    bool isAdmin(const std::string& username) const;
    std::vector<User> getAllUsers() const;
    RegisterResult createUserByAdmin(const std::string& username, const std::string& password,
                                   const std::string& fullName, const std::string& email,
                                   const std::string& phoneNumber, bool isAdmin);
    bool updateUserInfoByAdmin(const std::string& targetUsername, const std::string& newFullName,
                              const std::string& newEmail, const std::string& newPhoneNumber);
    
    // Wallet management
    bool addPointsToTotalWallet(int points, const User& user);
    int getTotalWalletBalance() const;
    bool viewTotalWalletInfo(const User& user) const;
    bool createNewPoints(int amount, const User& user);
    
    // Validation
    bool isValidEmail(const std::string& email);
    bool isValidPhoneNumber(const std::string& phoneNumber);
    
    // User access
    User* getUser(const std::string& username);

    // Các phương thức hiện có
    bool addUser(const User& user);
    bool removeUser(const std::string& username);
    User* findUser(const std::string& username);
    bool authenticateUser(const std::string& username, const std::string& password);
    void listUsers() const;
    bool updateUserInfo(const std::string& username, const std::string& newFullName,
                       const std::string& newEmail, const std::string& newPhoneNumber);
    bool resetPassword(const std::string& username);

    // Khởi tạo hệ thống và ví tổng
    bool isInitialized() const { return isSystemInitialized; }

    bool transferPointsFromTotal(const std::string& transactionId, int points, User& receiver);
};

#endif // USER_MANAGER_H 