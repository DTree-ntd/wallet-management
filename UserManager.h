#pragma once
#include <string>
#include <vector>
#include <map>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <regex>
#include "User.h"
#include "OTPManager.h"
#include "PasswordHasher.h"

enum class RegisterResult {
    SUCCESS,
    USERNAME_EXISTS,
    INVALID_USERNAME,
    INVALID_PASSWORD,
    INVALID_EMAIL,
    INVALID_PHONE,
    FILE_ERROR
};

class UserManager {
private:
    std::map<std::string, User> users;
    std::string dataFile;
    OTPManager otpManager;

    bool isUsernameExists(const std::string& username);
    void sendLoginInfoToUser(const std::string& email, const std::string& username, 
                            const std::string& password);
    bool saveUsers();
    void loadUsers();

public:
    UserManager(const std::string& usersPath);
    
    bool isValidEmail(const std::string& email);
    bool isValidPhoneNumber(const std::string& phoneNumber);
    
    RegisterResult registerUser(const std::string& username, const std::string& password, 
                              const std::string& fullName, const std::string& email, 
                              const std::string& phoneNumber, bool isPasswordAutoGenerated = false);
                     
    bool login(const std::string& username, const std::string& password);
    std::string generateRandomPassword();
    bool isPasswordAutoGenerated(const std::string& username);
    bool changePassword(const std::string& username, const std::string& oldPassword, 
                       const std::string& newPassword);

    // OTP functions
    std::string setupOTP(const std::string& username);
    bool verifyOTP(const std::string& username, const std::string& otp);
    std::string getCurrentOTP();
    void printOTPQRCode(const std::string& otp);
    
    // Password change with OTP
    std::string initiatePasswordChange(const std::string& username);
    bool changePasswordWithOTP(const std::string& username, const std::string& oldPassword, 
                             const std::string& newPassword, const std::string& otp);

    // Initiate user info update and generate OTP
    std::string initiateUserInfoUpdate(const std::string& username);
    
    // Update user information with OTP verification
    bool updateUserInfoWithOTP(const std::string& username, 
                             const std::string& newFullName,
                             const std::string& newEmail,
                             const std::string& newPhoneNumber,
                             const std::string& otp);

    // Admin functions
    bool isAdmin(const std::string& username) const;
    std::vector<User> getAllUsers() const;
    RegisterResult createUserByAdmin(const std::string& username, const std::string& password,
                                   const std::string& fullName, const std::string& email,
                                   const std::string& phoneNumber, bool isAdmin = false);
    bool updateUserInfoByAdmin(const std::string& targetUsername,
                             const std::string& newFullName,
                             const std::string& newEmail,
                             const std::string& newPhoneNumber);

    const User* getUser(const std::string& username) const {
        auto it = users.find(username);
        if (it != users.end()) {
            return &(it->second);
        }
        return nullptr;
    }
}; 